declare interface Options {
    documentRootPath?: string;
    scanStartPath?: string;
    resolvePath?: string;
    basePath?: string;
    collapsed?: boolean | null | undefined;
    collapseDepth?: number;
    hyphenToSpace?: boolean;
    underscoreToSpace?: boolean;
    capitalizeFirst?: boolean;
    capitalizeEachWords?: boolean;
    includeRootIndexFile?: boolean;
    includeFolderIndexFile?: boolean;
    useTitleFromFileHeading?: boolean;
    useTitleFromFrontmatter?: boolean;
    useFolderTitleFromIndexFile?: boolean;
    useFolderLinkFromIndexFile?: boolean;
    includeDotFiles?: boolean;
    convertSameNameSubFileToGroupIndexPage?: boolean;
    folderLinkNotIncludesFileName?: boolean;
    includeEmptyFolder?: boolean;
    sortMenusByName?: boolean;
    sortMenusByFrontmatterOrder?: boolean;
    sortMenusByFrontmatterDate?: boolean;
    sortMenusByFileDatePrefix?: boolean;
    sortMenusOrderByDescending?: boolean;
    sortMenusOrderNumericallyFromTitle?: boolean;
    sortMenusOrderNumericallyFromLink?: boolean;
    keepMarkdownSyntaxFromTitle?: boolean;
    debugPrint?: boolean;
    manualSortFileNameByPriority?: string[];
    excludeFiles?: string[];
    excludeFilesByFrontmatterFieldName?: string;
    excludeFolders?: string[];
    removePrefixAfterOrdering?: boolean;
    prefixSeparator?: string | RegExp;
    rootGroupText?: string;
    rootGroupLink?: string;
    rootGroupCollapsed?: boolean | null | undefined;
    frontmatterOrderDefaultValue?: number;
    frontmatterTitleFieldName?: string;
    /**
     * @deprecated
     */
    excludeFilesByFrontmatter?: boolean;
    /**
     * @deprecated
     */
    sortMenusOrderNumerically?: boolean;
    /**
     * @deprecated
     */
    sortByFileName?: string[];
    /**
     * @deprecated
     */
    root?: string;
    /**
     * @deprecated
     */
    includeEmptyGroup?: boolean;
    /**
     * @deprecated
     */
    withIndex?: boolean;
    /**
     * @deprecated
     */
    useFolderLinkAsIndexPage?: boolean;
    /**
     * @deprecated
     */
    useIndexFileForFolderMenuInfo?: boolean;
}
export type SidebarItem = {
    text?: string;
    link?: string;
    items?: SidebarItem[];
    collapsed?: boolean;
};
export interface SidebarMultiItem {
    base: string;
    items: SidebarItem[];
}
export interface SidebarMulti {
    [path: string]: SidebarMultiItem;
}
export type Sidebar = SidebarItem[] | SidebarMulti;
export default class VitePressSidebar {
    static generateSidebar(options?: Options | Options[]): Sidebar;
    private static generateDeprecateMessage;
    private static generateNotTogetherMessage;
    private static generateSidebarItem;
    private static getValueFromFrontmatter;
    private static getOrderFromFrontmatter;
    private static getDateFromFrontmatter;
    private static getExcludeFromFrontmatter;
    private static capitalizeFirst;
    private static formatTitle;
    private static getTitleFromMd;
    private static sortByObjectKey;
    private static deepDeleteKey;
    private static removePrefixFromTitleAndLink;
    private static isTrueMinimumNumberOfTimes;
}
export { VitePressSidebar };
export declare const generateSidebar: typeof VitePressSidebar.generateSidebar;
