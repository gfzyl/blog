import{_ as t,c as s,I as n,j as a,a as i,a4 as o,o as l,E as r}from"./chunks/framework.DOjH6-MY.js";const f=JSON.parse('{"title":"哈希表专题","description":"","frontmatter":{},"headers":[],"relativePath":"代码随想录算法/014模板.md","filePath":"代码随想录算法/014模板.md","lastUpdated":1725254059000}'),p={name:"代码随想录算法/014模板.md"},d=a("h1",{id:"哈希表专题",tabindex:"-1"},[i("哈希表专题 "),a("a",{class:"header-anchor",href:"#哈希表专题","aria-label":'Permalink to "哈希表专题"'},"​")],-1),c=o('<h2 id="哈希表理论基础" tabindex="-1">哈希表理论基础 <a class="header-anchor" href="#哈希表理论基础" aria-label="Permalink to &quot;哈希表理论基础&quot;">​</a></h2><h3 id="哈希表" tabindex="-1">哈希表 <a class="header-anchor" href="#哈希表" aria-label="Permalink to &quot;哈希表&quot;">​</a></h3><p>首先什么是 哈希表，哈希表（英文名字为Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指hash table就可以了）。</p><blockquote><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p></blockquote><p>其实直白来讲其实数组就是一张哈希表。哈希表中<strong>关键码</strong>就是数组的<strong>索引下标</strong>，然后<u>通过下标直接访问数组中的元素</u>，如下图所示：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104234805168.png" alt="哈希表1" loading="lazy"></p><p>那么哈希表能解决什么问题呢，<strong>一般哈希表都是用来<u>快速判断一个元素是否出现集合里</u>。</strong></p><p>例如要查询一个名字是否在这所学校里。要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。将学生姓名映射到哈希表上就涉及到了<strong>hash function ，也就是哈希函数</strong></p><h3 id="哈希函数" tabindex="-1">哈希函数 <a class="header-anchor" href="#哈希函数" aria-label="Permalink to &quot;哈希函数&quot;">​</a></h3><p>哈希函数如下图所示，通过<strong>hashCode</strong>把名字转化为数值，<em>一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值</em>，这样就把学生名字映射为哈希表上的索引数字了。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2021010423484818.png" alt="哈希表2" loading="lazy"></p><p>如果hashCode得到的数值大于哈希表的大小（即tableSize）怎么办呢❓</p><p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，这样我们就保证了学生姓名一定可以映射到哈希表上了。</p><p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p><p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p><p>接下来<strong>哈希碰撞</strong>登场</p><h2 id="专题题目" tabindex="-1">专题题目 <a class="header-anchor" href="#专题题目" aria-label="Permalink to &quot;专题题目&quot;">​</a></h2><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><ol><li><p>题目</p></li><li><p>思路</p></li><li><p>我的代码</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>官方推荐</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol>',19);function h(u,m,b,g,_,v){const e=r("ArticleMetadata");return l(),s("div",null,[d,n(e),c])}const q=t(p,[["render",h]]);export{f as __pageData,q as default};
