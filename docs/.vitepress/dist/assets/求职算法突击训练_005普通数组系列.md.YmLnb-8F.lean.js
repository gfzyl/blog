import{_ as n,c as p,I as l,j as s,a as h,a4 as i,o as e,E as t}from"./chunks/framework.DOjH6-MY.js";const D=JSON.parse('{"title":"普通数组系列","description":"","frontmatter":{},"headers":[],"relativePath":"求职算法突击训练/005普通数组系列.md","filePath":"求职算法突击训练/005普通数组系列.md","lastUpdated":1725254059000}'),k={name:"求职算法突击训练/005普通数组系列.md"},r=s("h1",{id:"普通数组系列",tabindex:"-1"},[h("普通数组系列 "),s("a",{class:"header-anchor",href:"#普通数组系列","aria-label":'Permalink to "普通数组系列"'},"​")],-1),E=i("",9),d=s("blockquote",null,[s("p",null,[s("strong",null,"思路及算法")]),s("p",null,"假设 nums 数组的长度是 n，下标从 0 到 n−1。"),s("p",null,"我们用 f(i) 代表以第 i 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是："),s("p",{"f(i)":""},"max 0≤i≤n−1"),s("p",null,"因此我们只需要求出每个位置的 f(i)，然后返回 f 数组中的最大值即可。那么我们如何求 f(i) 呢？我们可以考虑 nums[i] 单独成为一段还是加入 f(i−1) 对应的那一段，这取决于 nums[i] 和 f(i−1)+nums[i] 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程："),s("p",{"f(i−1)+nums[i],nums[i]":""},"f(i)=max"),s("p",null,"不难给出一个时间复杂度 O(n)、空间复杂度 O(n) 的实现，即用一个 f 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 f(i) 只和 f(i−1) 相关，于是我们可以只用一个变量 pre 来维护对于当前 f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想。")],-1),g=i("",38);function c(y,b,u,o,m,F){const a=t("ArticleMetadata");return e(),p("div",null,[r,l(a),E,d,g])}const v=n(k,[["render",c]]);export{D as __pageData,v as default};
